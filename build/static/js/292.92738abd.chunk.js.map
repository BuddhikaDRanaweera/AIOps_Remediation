{"version":3,"file":"static/js/292.92738abd.chunk.js","mappings":"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","sources":["view/remediation-dashboard/RemidiationForm.js","view/remediation-dashboard/Index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setProblem } from \"../../app/features/problem/ProblemSlice\";\r\nimport useFetch_GET from \"../../services/http/Get\";\r\n\r\nconst RemidiationForm = ({ data }) => {\r\n  const problemTitle = useSelector((state) => state.problem.problemTitle);\r\n  const subProblemTitle = useSelector((state) => state.problem.subProblemTitle);\r\n  const { isLoading, error, data:recentProblems, getData } = useFetch_GET();\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    getData(\"/audit-status\");\r\n    \r\n  },[]);\r\n  if(recentProblems)\r\n    console.log(recentProblems,\">>>>>>>\");\r\n  const [pId, setPId] = useState('')\r\n\r\n  useEffect(()=>{\r\n    if(problemTitle){\r\n      console.log(problemTitle, 'kkk')\r\n      setSelectedProblem((prev) => problemTitle);\r\n    }\r\n  },[problemTitle]);\r\n\r\n  useEffect(()=>{\r\n    console.log(subProblemTitle,\"subProblemTitle\");\r\n    if(subProblemTitle && recentProblems){\r\n      \r\n      console.log(subProblemTitle, 'mils');\r\n      console.log(recentProblems,'oo');\r\n      const filter = recentProblems?.activity?.filter((item) => item?.serviceName == subProblemTitle && item?.status == 'OPEN'\r\n      );\r\n      console.log(filter,'po');\r\n\r\n      setPId(prev => filter[0]?.pid);\r\n    }\r\n  },[subProblemTitle,recentProblems]);\r\n\r\n  const navigate = useNavigate();\r\n  const navigateTo = (url) => {\r\n    navigate(url);\r\n  };\r\n  const [selectedProblem, setSelectedProblem] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const handleProblemChange = (event) => {\r\n    if(event.target.value !== ''){\r\n      setSelectedProblem((prev) => event.target.value);\r\n    }\r\n  };\r\n\r\n  const handleSubProblemChange = (event) => {\r\n     if(selectedProblem !== ''){\r\n      const filter = data[selectedProblem].find(item => item.serviceName == event.target.value);\r\n      dispatch(setProblem({problemTitle: selectedProblem, subProblemTitle: event.target.value, problemId: filter.id, serviceName: event.target.value,}))\r\n     }\r\n  };\r\n\r\n  useEffect(() => {console.log(data, 'data');})\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex flex-col gap-2\">\r\n        <div className=\" w-full\">\r\n          <div className=\"flex flex-col\">\r\n            <label\r\n              className=\"flex justify-start mb-1 text-sm font-medium text-gray-900\"\r\n            >\r\n              Problem Title:\r\n            </label>\r\n            <select\r\n              id=\"problem-title\"\r\n              onChange={handleProblemChange}\r\n              defaultValue={''}\r\n              value={problemTitle}\r\n              \r\n              className=\"bg-gray-50 border border-gray-300 text-gray-900 mb-2 text-sm focus:ring-2  focus:outline-none focus:ring-second block w-full p-2.5\"\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select Problem\r\n              </option>\r\n              {Object.keys(data)?.map((item, index) => (\r\n                <option key={index} value={item}>\r\n                  {item}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"flex flex-col\">\r\n            <label\r\n              className=\"flex justify-start mb-1 text-sm font-medium text-gray-900\"\r\n            >\r\n              Sub-Problem:\r\n            </label>\r\n            <select\r\n              disabled={selectedProblem == \"\"}\r\n              id=\"sub-problem\"\r\n              onChange={handleSubProblemChange}\r\n              defaultValue={\"\"}\r\n              value={subProblemTitle}\r\n              \r\n              className=\"bg-gray-50 border border-gray-300 text-gray-900 mb-2 text-sm focus:ring-2  focus:outline-none focus:ring-second block w-full p-2.5\"\r\n            >\r\n              <option value={\"\"} disabled>\r\n                Select Service\r\n              </option>\r\n\r\n              {data[selectedProblem]?.map((item, index) => (\r\n                <option key={index} value={item.serviceName}>\r\n                  {item.serviceName}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"flex flex-col\">\r\n            <label\r\n              className=\"flex justify-start mb-1 text-sm font-medium text-gray-900\"\r\n            >\r\n              Recommendation:\r\n            </label>\r\n            <select\r\n              id=\"sub-problem\"\r\n              className=\"bg-gray-50 border border-gray-300 text-gray-900 mb-2 text-sm focus:ring-2  focus:outline-none focus:ring-second block w-full p-2.5\"\r\n            >\r\n              <option disabled>Select Recommendation</option>\r\n              {[\"Start Service\", \"Recommendation 2\", \"Recommendation 3\"].map(\r\n                (item, index) => (\r\n                  <option key={index}>{item}</option>\r\n                )\r\n              )}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-end gap-2\">\r\n        <button\r\n          id=\"createRuleButton\"\r\n          className=\"flex gap-2 focus:outline-none text-black bg-slate-100  hover:bg-slate-200 focus:ring-2  font-medium rounded-sm text-sm px-5 py-2 mb-2\"\r\n          onClick={() => {\r\n            if(subProblemTitle) navigateTo(`/assisted-analysis/${pId}`);\r\n          }}\r\n        >\r\n          <i className=\"fa-solid fa-chart-line my-auto\"></i>\r\n          Assisted Analysis\r\n        </button>\r\n        <button\r\n          id=\"createRuleButton\"\r\n          className=\"flex gap-2 focus:outline-none text-black bg-slate-100  hover:bg-slate-200 focus:ring-2  font-medium rounded-sm text-sm px-5 py-2 mb-2\"\r\n          onClick={() => {\r\n            navigateTo(\"/build-solution\");\r\n          }}\r\n        >\r\n          <i className=\"fa-solid fa-chart-line my-auto\"></i>\r\n          Build Solution\r\n        </button>\r\n        </div>\r\n\r\n        {/* <div className=\"w-[40%] flex flex-col justify-center gap-5\">\r\n          <div className=\"mx-auto w-full\">\r\n            <div\r\n              className=\" hover:bg-main w-full p-5 rounded-md text-main border border-main hover:text-white shadow-sm shadow-slate-400\"\r\n              onClick={() => {\r\n                navigateTo(\"/assisted-analysis\");\r\n              }}\r\n            >\r\n              <i className=\"fa-solid fa-chart-line text-4xl\"></i>\r\n              <p className=\"active-problem-option-title\">\r\n                <strong>Assisted Analysis</strong>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"mx-auto w-full\">\r\n            <div\r\n              className=\" hover:bg-main w-full p-5 rounded-md text-main border border-main hover:text-white shadow-sm shadow-slate-400\"\r\n              onClick={() => {\r\n                navigateTo(\"/build-solution\");\r\n              }}\r\n            >\r\n              <i className=\"fa-solid fa-puzzle-piece text-4xl\"></i>\r\n              <p className=\"active-problem-option-title\">\r\n                <strong>Build Solution</strong>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RemidiationForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport useFetch_GET from \"../../services/http/Get\";\r\n/* import ProblemForm from \"./ProblemList\"; */\r\nimport RemidiationForm from \"./RemidiationForm\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setNewRemediation } from \"../../app/features/modals_view/modal\";\r\n\r\nconst Dashboard = () => {\r\n  const [problemData, setProblemData] = useState([]);\r\n  // const [handleSelectData, setHandleSelectData] = useState();\r\n  const { isLoading, error, data, getData } = useFetch_GET();\r\n  const { isLoading:allProblemLoading, error:allProblemError, data:allProblemData, getData:allProblemGetData } = useFetch_GET();\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    if(data){\r\n      console.log(transformData(data), 'new problem list');\r\n      setProblemData(transformData(data));\r\n    }\r\n  }, [data]);\r\n\r\n  const [isHighlightChecked, setIsHighlightChecked] = useState(false);\r\n  const handleHighlightChange = () => {\r\n    setIsHighlightChecked((prev) => !prev);\r\n  };\r\n\r\n  const transformData = (value) => {\r\n    const result = {};\r\n    value.forEach(item => {\r\n      const { problemTitle, serviceName, id } = item;\r\n      if (!result[problemTitle]) {\r\n        result[problemTitle] = [];\r\n      }\r\n      result[problemTitle].push({id,serviceName});\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData(\"/get_new_problems\");\r\n    allProblemGetData(\"/problems\");\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    if(allProblemData) console.log(allProblemData, 'hvchjdscnm');\r\n  },[allProblemData])\r\n\r\n  return (\r\n \r\n    <div className=\"p-5 flex flex-col md:flex-row gap-2\">\r\n     \r\n     <div className=\"flex flex-col gap-2 bg-white p-5 shadow-sm shadow-slate-400 md:w-[700px]\">\r\n      <div className=\"flex justify-between\">\r\n        <h3 className=\"text-sm font-semibold\">Active Problem</h3>\r\n        <button\r\n          id=\"createRuleButton\"\r\n          className=\"focus:outline-none text-black bg-slate-200 hover:bg-slate-300 font-medium rounded-sm text-sm px-5 py-2 mb-2\"\r\n          onClick={() => {\r\n            dispatch(setNewRemediation(true))\r\n          }}\r\n        >\r\n          Create Rule\r\n        </button>\r\n      </div>\r\n      <div>\r\n      <RemidiationForm data={problemData} />\r\n      </div>\r\n     </div>\r\n\r\n     {/*  */}\r\n\r\n     <div className=\"bg-white p-5 h-[400px] md:w-[calc(100vw-700px)] shadow-sm shadow-slate-400\">\r\n            <div className=\"flex justify-between \">\r\n              <h3 className=\"text-sm font-semibold\">All Problems</h3>\r\n              <div className=\"flex items-center gap-2 px-2 border h-[29px] bg-slate-50 border-gray-200\">\r\n                <input\r\n                  id=\"bordered-checkbox-1\"\r\n                  type=\"checkbox\"\r\n                  value=\"\"\r\n                  checked={isHighlightChecked}\r\n                  onChange={handleHighlightChange}\r\n                  name=\"bordered-checkbox\"\r\n                  className=\" text-blue-600 bg-gray-100 border-gray-300\"\r\n                />\r\n                <label className=\"w-full text-gray-900\">\r\n                  <p className=\"text-xs p-0 m-0\">Highlight</p>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className=\"py-2 h-[340px] overflow-auto\">\r\n              <table className=\"w-full\">\r\n                <thead>\r\n                  <tr className=\"bg-slate-200 text-sm\">\r\n                    <th className=\"p-2\">id</th>\r\n                    <th>title</th>\r\n                    <th>service</th>\r\n                    <th>status</th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {allProblemData?.map((incident, index) => (\r\n                    <tr\r\n                      key={index}\r\n\r\n                      className={`${incident?.status == 'RESOLVED' && isHighlightChecked &&'bg-green-50'} ${incident?.status == 'NOT_RESOLVED' && isHighlightChecked &&'bg-red-50'} hover:bg-slate-50 text-xs border-b border-gray-300`}\r\n                    >\r\n                      <td className=\"p-2\">{incident?.id}</td>\r\n                      <td>{incident?.problemTitle}</td>\r\n                      <td>{incident?.serviceName}</td>\r\n                      <td>{incident?.status}</td>\r\n\r\n                      <td>\r\n                        {/* <BsArrowUpRightSquareFill className=\"text-lg\" /> */}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["_ref","_Object$keys","_data$selectedProblem","data","problemTitle","useSelector","state","problem","subProblemTitle","isLoading","error","recentProblems","getData","useFetch_GET","useEffect","console","log","pId","setPId","useState","setSelectedProblem","prev","_recentProblems$activ","filter","activity","item","serviceName","status","_filter$","pid","navigate","useNavigate","navigateTo","url","selectedProblem","dispatch","useDispatch","_jsx","children","_jsxs","className","id","onChange","event","target","value","defaultValue","disabled","Object","keys","map","index","find","setProblem","problemId","onClick","concat","Dashboard","problemData","setProblemData","allProblemLoading","allProblemError","allProblemData","allProblemGetData","transformData","isHighlightChecked","setIsHighlightChecked","result","forEach","push","setNewRemediation","RemidiationForm","type","checked","handleHighlightChange","name","incident"],"sourceRoot":""}