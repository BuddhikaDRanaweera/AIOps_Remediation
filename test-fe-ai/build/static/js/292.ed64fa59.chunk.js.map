{"version":3,"file":"static/js/292.ed64fa59.chunk.js","mappings":"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","sources":["view/remediation-dashboard/RemidiationForm.js","view/remediation-dashboard/Index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setProblem } from \"../../app/features/problem/ProblemSlice\";\nimport \"./RemidiationForm.css\";\n\nconst RemidiationForm = ({ data }) => {\n  const problem = useSelector((state) => state.problem);\n  // const { isLoading, error, data, postData } = useFetch_POST();\n  const navigate = useNavigate();\n  const navigateTo = (url) => {\n    navigate(url);\n  };\n  const [selectedProblem, setSelectedProblem] = useState({\n    main: \"\",\n    sub: \"\",\n    id: \"\",\n  });\n  const [subProblems, setSubProblems] = useState([]);\n\n  // const onSubmitData = (data) => {\n  //   onSubmit(data);\n  // };\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (selectedProblem.main) {\n      // console.log(data);\n      const filteredSubProblems = data\n        .filter(\n          (item) =>\n            item.problemTitle === selectedProblem.main && item.subProblemTitle\n        )\n        .map((item) => [item.subProblemTitle, item.id, item.serviceName]);\n      setSubProblems(filteredSubProblems);\n      console.log(\n        filteredSubProblems[0],\n        filteredSubProblems[1],\n        filteredSubProblems[2]\n      );\n    } else {\n      setSubProblems([]);\n    }\n  }, [selectedProblem.main, data]);\n\n  const handleProblemChange = (event) => {\n    setSelectedProblem({ main: event.target.value, sub: \"\" });\n  };\n\n  const handleSubProblemChange = (event) => {\n    const [subproblemname, problemId, serviceName] = JSON.parse(\n      event.target.value\n    );\n    console.log(subproblemname, problemId, serviceName);\n    let main = selectedProblem.main;\n    dispatch(setProblem({ main, subproblemname, problemId, serviceName }));\n  };\n\n  return (\n    <div className=\"right-panel\">\n      <div className=\"table-header\">Active Problem</div>\n\n      <div>\n        <div className=\"form-value\">\n          <div style={{ width: \"20%\", marginTop: \"10px\" }}>\n            <p className=\"recommendation-title\">\n              <strong>Problem Title: </strong>\n            </p>\n          </div>\n          <div\n            style={{\n              width: \"80%\",\n              display: \"flex\",\n              justifyContent: \"start\",\n              marginTop: \"10px\",\n            }}\n          >\n            <select\n              id=\"problem-title\"\n              className=\"right-panel-input-box\"\n              onChange={handleProblemChange}\n              value={selectedProblem.main}\n            >\n              <option value=\"\">Select Problem</option>\n              {Array.from(\n                new Set(data?.map((problem) => problem.problemTitle))\n              ).map((title, index) => (\n                <option key={index} value={title}>\n                  {title}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"form-value\">\n          <div style={{ width: \"20%\", marginTop: \"5px\" }}>\n            <p className=\"recommendation-title\">\n              <strong>Sub-Problem: </strong>\n            </p>\n          </div>\n          <div\n            style={{\n              width: \"80%\",\n              display: \"flex\",\n              justifyContent: \"start\",\n              marginTop: \"5px\",\n            }}\n          >\n            <select\n              id=\"sub-problem\"\n              className=\"right-panel-input-box\"\n              onChange={handleSubProblemChange}\n              value={JSON.stringify([\n                selectedProblem.sub,\n                subProblems.find((sub) => sub[0] === selectedProblem.sub)?.[1],\n              ])}\n            >\n              <option value=\"\">Select Service</option>\n              {subProblems.map(([subProblemName, id, ServiceName], index) => (\n                <option\n                  key={index}\n                  value={JSON.stringify([subProblemName, id, ServiceName])}\n                >\n                  {ServiceName + \" Service\"}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"form-value\">\n          <div style={{ width: \"20%\", marginTop: \"5px\" }}>\n            <p className=\"recommendation-title\">\n              <strong>Recommendation: </strong>\n            </p>\n          </div>\n          <div\n            style={{\n              width: \"80%\",\n              display: \"flex\",\n              justifyContent: \"start\",\n              marginTop: \"5px\",\n            }}\n          >\n            <div className=\"right-panel-input-box\">\n              <div class=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"recommendation1\"\n                  name=\"recommendation\"\n                  value=\"Recommendation1\"\n                />\n                <label htmlFor=\"recommendation1\">Recommendation 1</label>\n              </div>\n              <br />\n              <div class=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"recommendation2\"\n                  name=\"recommendation\"\n                  value=\"Recommendation2\"\n                />\n                <label htmlFor=\"recommendation2\">Recommendation 2</label>\n              </div>\n              <br />\n              <div class=\"checkbox-container\">\n                <input\n                  type=\"checkbox\"\n                  id=\"recommendation3\"\n                  name=\"recommendation\"\n                  value=\"Recommendation3\"\n                />\n                <label htmlFor=\"recommendation3\">Recommendation 3</label>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"active-problem-manage-option\">\n        <div className=\"option-assisted-analysis\">\n          <div\n            className=\"option-assisted-analysis-text\"\n            onClick={() => {\n              navigateTo(\"/assisted-analysis\");\n            }}\n          >\n            <i class=\"fa-solid fa-chart-line\"></i>\n            <p className=\"active-problem-option-title\">\n              <strong>Assisted Analysis</strong>\n            </p>\n          </div>\n        </div>\n        <div className=\"option-build-solution\">\n          <div\n            className=\"option-build-solution-text\"\n            onClick={() => {\n              navigateTo(\"/build-solution\");\n            }}\n          >\n            <i class=\"fa-solid fa-puzzle-piece\"></i>\n            <p className=\"active-problem-option-title\">\n              <strong>Build Solution</strong>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RemidiationForm;\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useFetch_GET from \"../../services/http/Get\";\n/* import ProblemForm from \"./ProblemList\"; */\nimport RemidiationForm from \"./RemidiationForm\";\n\nconst Dashboard = () => {\n  const [problemData, setProblemData] = useState([]);\n  const [handleSelectData, setHandleSelectData] = useState();\n  const { isLoading, error, data, getData } = useFetch_GET();\n  console.log(problemData, \"LKLKLK\");\n  useEffect(() => {\n    setProblemData(data);\n  }, [data]);\n  const navigate = useNavigate();\n  const handleSubmit = (value) => {\n    console.log(value);\n    setHandleSelectData(value);\n  };\n\n  useEffect(() => {\n    getData(\"/get_new_problems\");\n  }, []);\n  return (\n    <div>\n      <div>\n        <button\n          id=\"createRuleButton\"\n          className=\"createrulebutton\"\n          onClick={() => {\n            navigate(\"/new-rule\");\n          }}\n        >\n          Create New Rule\n        </button>\n        <div className=\"container\">\n          {/* <div className=\"left-panel\">\n            <div className=\"table-header\">Problem List</div>\n            <ProblemForm data={problemData} onSubmit={handleSubmit} />\n          </div> */}\n          <RemidiationForm data={data} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["_ref","_subProblems$find","data","useSelector","state","problem","navigate","useNavigate","navigateTo","url","selectedProblem","setSelectedProblem","useState","main","sub","id","subProblems","setSubProblems","dispatch","useDispatch","useEffect","filteredSubProblems","filter","item","problemTitle","subProblemTitle","map","serviceName","console","log","_jsxs","className","children","_jsx","style","width","marginTop","display","justifyContent","onChange","event","target","value","Array","from","Set","title","index","subproblemname","problemId","JSON","parse","setProblem","stringify","find","_ref2","subProblemName","ServiceName","class","type","name","htmlFor","onClick","Dashboard","problemData","setProblemData","handleSelectData","setHandleSelectData","isLoading","error","getData","useFetch_GET","RemidiationForm"],"sourceRoot":""}